<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SenseNet.TaskManagement.Core</name>
    </assembly>
    <members>
        <member name="T:SenseNet.TaskManagement.Core.AgentManagerEventArgs">
            <summary>
            Represents an AgentManager event argument.
            </summary>
        </member>
        <member name="M:SenseNet.TaskManagement.Core.AgentManagerEventArgs.#ctor(System.Diagnostics.Process)">
            <summary>
            Creates a new instance of the AgentManagerEventArgs class.
            </summary>
            <param name="process">An agent process to track.</param>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.AgentManagerEventArgs.Process">
            <summary>
            The agent process wrapped by this event argument.
            </summary>
        </member>
        <member name="T:SenseNet.TaskManagement.Core.AgentManager">
            <summary>
            Manages agent processes: monitors running processes and starts new ones as needed.
            </summary>
        </member>
        <member name="F:SenseNet.TaskManagement.Core.AgentManager.AGENT_PROCESSNAME">
            <summary>
            Agent process name.
            </summary>
        </member>
        <member name="F:SenseNet.TaskManagement.Core.AgentManager.AGENT_NAMEFORMAT">
            <summary>
            Agent name format for displaying a unique agent name on the UI.
            </summary>
        </member>
        <member name="F:SenseNet.TaskManagement.Core.AgentManager.UPDATER_PROCESSNAME">
            <summary>
            Name of the task management updater process (CURRENTLY NOT USED).
            </summary>
        </member>
        <member name="F:SenseNet.TaskManagement.Core.AgentManager.UPDATER_PACKAGENAME">
            <summary>
            Name of the compressed update package (CURRENTLY NOT USED).
            </summary>
        </member>
        <member name="F:SenseNet.TaskManagement.Core.AgentManager.UPDATER_PACKAGEPARENTPATH">
            <summary>
            Content Repository path of update package parent folder (CURRENTLY NOT USED).
            </summary>
        </member>
        <member name="F:SenseNet.TaskManagement.Core.AgentManager.UPDATER_PACKAGEPATH">
            <summary>
            Content Repository path of the update package (CURRENTLY NOT USED).
            </summary>
        </member>
        <member name="F:SenseNet.TaskManagement.Core.AgentManager.UPDATER_STATUSCODE_STARTED">
            <summary>
            Exit code sent by the updater process when the update operation has already started (CURRENTLY NOT USED).
            </summary>
        </member>
        <member name="E:SenseNet.TaskManagement.Core.AgentManager.ProcessStarted">
            <summary>
            Event for the case when a new agent process is started.
            </summary>
        </member>
        <member name="E:SenseNet.TaskManagement.Core.AgentManager.OnTaskManagementUpdateStarted">
            <summary>
            Event for the case when a task management update process is started (CURRENTLY NOT USED).
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.AgentManager.AgentPath">
            <summary>
            Gets the full path of the agent executable.
            </summary>
        </member>
        <member name="M:SenseNet.TaskManagement.Core.AgentManager.Startup(System.String,System.Boolean,System.String)">
            <summary>
            Start monitoring and reviving task executor agents.
            </summary>
            <param name="executionBasePath">The absolute path of the folder where the code is executing. 
            This will be used for finding the agent executable if its configured path is relative.</param>
            <param name="delayedAgents">If set to true, agents will not start immediately, only when a new task arrive.
            Default is false. Use this parameter only in a development environment.</param>
            <param name="taskManagementFolderPath">Optional path of the TaskManagement folder. Default: current execution folder.</param>
        </member>
        <member name="M:SenseNet.TaskManagement.Core.AgentManager.Shutdown">
            <summary>
            Shuts down the agent processes started by this app domain.
            </summary>
        </member>
        <member name="M:SenseNet.TaskManagement.Core.AgentManager.GetAgentName">
            <summary>
            Gets a unique agent name containing the machine name and process id. 
            Used from the GUI when displaying a list of running agents.
            </summary>
        </member>
        <member name="M:SenseNet.TaskManagement.Core.AgentManager.AnyTaskRegistered">
            <summary>
            Sets the current agent check algoritm to the real one that actually starts agents.
            </summary>
        </member>
        <member name="T:SenseNet.TaskManagement.Core.Configuration.AppAuthCollection">
            <summary>
            Represents a collection of configured client applications that connect to this Task Management application.
            </summary>
        </member>
        <member name="M:SenseNet.TaskManagement.Core.Configuration.AppAuthCollection.CreateNewElement">
            <summary>
            Creates a new AppAuthCollection element.
            </summary>
            <returns>A newly created AppAuthCollection element.</returns>
        </member>
        <member name="M:SenseNet.TaskManagement.Core.Configuration.AppAuthCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified AppAuth element.
            </summary>
            <param name="element">The System.Configuration.ConfigurationElement to return the key for.</param>
            <returns>AppId of the application represented by the config element.</returns>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.Configuration.AppAuthCollection.ElementName">
            <summary>
            Gets the name used to identify child configuration elements in the collection.
            </summary>
        </member>
        <member name="M:SenseNet.TaskManagement.Core.Configuration.AppAuthCollection.IsElementName(System.String)">
            <summary>
            Indicates whether the specified element exists in this collection.
            </summary>
            <param name="elementName">The name of the element to verify.</param>
            <returns>true if the element name is the child element name (add).</returns>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.Configuration.AppAuthCollection.CollectionType">
            <summary>
            Gets the type of the configuration collection: BasicMap.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.Configuration.AppAuthCollection.Item(System.Int32)">
            <summary>
            Gets the client app config element at the specified index location.
            </summary>
            <param name="index">Index of the application element.</param>
            <returns>The application at the specified index.</returns>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.Configuration.AppAuthCollection.Item(System.String)">
            <summary>
            Returns the client app config element with the specified key.
            </summary>
            <param name="key">The key of the app element to return.</param>
            <returns>The app element with the specified key; otherwise null.</returns>
        </member>
        <member name="T:SenseNet.TaskManagement.Core.Configuration.UserCredentials">
            <summary>
            Represents a user/password pair for accessing the client application.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.Configuration.UserCredentials.UserName">
            <summary>
            Username for accessing the client application.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.Configuration.UserCredentials.Password">
            <summary>
            Password for the user.
            </summary>
        </member>
        <member name="T:SenseNet.TaskManagement.Core.Configuration.AppAuthElement">
            <summary>
            Represents a client application configuration element.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.Configuration.AppAuthElement.AppId">
            <summary>
            Gets the app id.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.Configuration.AppAuthElement.UserName">
            <summary>
            Username for the client application.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.Configuration.AppAuthElement.Password">
            <summary>
            Password for the user.
            </summary>
        </member>
        <member name="T:SenseNet.TaskManagement.Core.Configuration.AppAuthSection">
            <summary>
            Defines a configuration section for holding user credentials to connect to different client applications.
            </summary>
        </member>
        <member name="F:SenseNet.TaskManagement.Core.Configuration.AppAuthSection.SECTIONFULLNAME">
            <summary>
            Configuration section xpath.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.Configuration.AppAuthSection.UserName">
            <summary>
            Gets a global (fallback) username for client applications that have no user configured.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.Configuration.AppAuthSection.Password">
            <summary>
            Password for the global user.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.Configuration.AppAuthSection.AppAuthEntries">
            <summary>
            
            </summary>
        </member>
        <member name="M:SenseNet.TaskManagement.Core.Configuration.AppAuthSection.GetUserCredentials(System.String)">
            <summary>
            Gets a user name and password configured for the provided application or 
            (if it is not configured) a global one.
            </summary>
            <param name="appId">An application id to get credentials for.</param>
            <returns>A username/password pair.</returns>
        </member>
        <member name="T:SenseNet.TaskManagement.Core.ITaskManager">
            <summary>
            Describes the interface of a task manager implementation that is able to register
            client applications and tasks.
            </summary>
        </member>
        <member name="M:SenseNet.TaskManagement.Core.ITaskManager.RegisterTaskAsync(System.String,SenseNet.TaskManagement.Core.RegisterTaskRequest)">
            <summary>
            Register a task asynchronously.
            </summary>
            <param name="taskManagementUrl">Url of the central Task Management web application.</param>
            <param name="requestData">Task registration details.</param>
            <returns>A result object containing details of the registered task.</returns>
        </member>
        <member name="M:SenseNet.TaskManagement.Core.ITaskManager.RegisterApplicationAsync(System.String,SenseNet.TaskManagement.Core.RegisterApplicationRequest)">
            <summary>
            Registers a new client application in the Task Management database.
            </summary>
            <param name="taskManagementUrl">Url of the central Task Management web application.</param>
            <param name="requestData">Application registration details.</param>
            <returns>True if the registration was sucessful.</returns>
        </member>
        <member name="M:SenseNet.TaskManagement.Core.ITaskManager.OnTaskFinished(SenseNet.TaskManagement.Core.SnTaskResult)">
            <summary>
            An event handler that is fired whenever a task is finished. 
            This must be called by the client application from the task finalizer 
            method when that is called by the Task Management web app.
            </summary>
            <param name="result">Task result received in the finalizer.</param>
        </member>
        <member name="T:SenseNet.TaskManagement.Core.RegisterApplicationRequest">
            <summary>
            Holds all the information needed for registering an application.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.RegisterApplicationRequest.AppId">
            <summary>
            The application id to identify the different client app instances.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.RegisterApplicationRequest.ApplicationUrl">
            <summary>
            The base url of the client application for callback API calls.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.RegisterApplicationRequest.TaskFinalizeUrl">
            <summary>
            Relative or absolute url of a global finalizer callback in the client application.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.RegisterApplicationRequest.AuthenticationUrl">
            <summary>
            Relative or absolute url of an authentication callback in the client application (NOT IMPLEMENTED).
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.RegisterApplicationRequest.AuthorizationUrl">
            <summary>
            Relative or absolute url of an authorization callback in the client application (NOT IMPLEMENTED).
            </summary>
        </member>
        <member name="T:SenseNet.TaskManagement.Core.RegisterTaskRequest">
            <summary>
            Holds all the information needed for registering a task.
            </summary>
        </member>
        <member name="F:SenseNet.TaskManagement.Core.RegisterTaskRequest.ERROR_UNKNOWN_APPID">
            <summary>
            Error id for unknown client applications.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.RegisterTaskRequest.AppId">
            <summary>
            The application id to identify the different client app instances.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.RegisterTaskRequest.Type">
            <summary>
            Task type name for identifying the appropriate task executor. Mandatory.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.RegisterTaskRequest.Title">
            <summary>
            User friendly title of the task that will be displayed on task monitors.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.RegisterTaskRequest.Priority">
            <summary>
            Determines the order of the execution of tasks. Agents will get immediate tasks first.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.RegisterTaskRequest.Tag">
            <summary>
            Optional value for categorizing tasks. Task monitor user interface may use this to display only certain task events.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.RegisterTaskRequest.FinalizeUrl">
            <summary>
            Optional finalize callback url of the task. If it is relative, the system will 
            try to complete it using the application base url provided during app registration.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.RegisterTaskRequest.TaskData">
            <summary>
            Custom data that will be passed over to the agent and to the tak executor eventually. The recommended format is JSON.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.RegisterTaskRequest.Hash">
            <summary>
            Optional hash code for identifying tasks. If left empty, we will generate a default hash from the task data.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.RegisterTaskRequest.MachineName">
            <summary>
            Optional machine name of the task origin for logging purposes.
            </summary>
        </member>
        <member name="T:SenseNet.TaskManagement.Core.RepositoryClient">
            <summary>
            Client API for communicating with the Task Management web application. TaskManager implementations
            use it so that they do not have to send native HTTP requests.
            </summary>
        </member>
        <member name="M:SenseNet.TaskManagement.Core.RepositoryClient.RegisterTaskAsync(System.String,SenseNet.TaskManagement.Core.RegisterTaskRequest)">
            <summary>
            Registers a task through the task management REST API as an asynchronous operation.
            </summary>
            <param name="taskManagementUrl">The url of the TaskManagement component.</param>
            <param name="requestData">Contains the necessary information for registering a task.</param>
            <returns>Returns a RegisterTaskResult object containing information about the registered task.</returns>
        </member>
        <member name="M:SenseNet.TaskManagement.Core.RepositoryClient.RegisterApplicationAsync(System.String,SenseNet.TaskManagement.Core.RegisterApplicationRequest)">
            <summary>
            Registers an application through the task management REST API as an asynchronous operation.
            </summary>
            <param name="taskManagementUrl">The url of the TaskManagement component.</param>
            <param name="requestData">Contains the necessary information for registering an application.</param>
            <returns>True if the request was successful.</returns>
        </member>
        <member name="T:SenseNet.TaskManagement.Core.ServerType">
            <summary>
            Task Management deploy type (local or distributed) (NOT USED).
            </summary>
        </member>
        <member name="F:SenseNet.TaskManagement.Core.ServerType.Local">
            <summary>
            Local mode.
            </summary>
        </member>
        <member name="F:SenseNet.TaskManagement.Core.ServerType.Distributed">
            <summary>
            Distributed mode.
            </summary>
        </member>
        <member name="T:SenseNet.TaskManagement.Core.ServerContext">
            <summary>
            Describes the context the task management is running.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.ServerContext.ServerType">
            <summary>
            Task Management deploy type (local or distributed) (NOT USED).
            </summary>
        </member>
        <member name="T:SenseNet.TaskManagement.Core.Progress">
            <summary>
            Contains progress information about a task. The progress and maximum values are for
            letting the UI display progress information to the user easily.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.Progress.SubtaskId">
            <summary>
            Subtask identifier.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.Progress.SubtaskProgress">
            <summary>
            Subtask progress.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.Progress.SubtaskProgressMax">
            <summary>
            Subtask progress maximum.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.Progress.OverallProgress">
            <summary>
            Overall task progress.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.Progress.OverallProgressMax">
            <summary>
            Overall task progress maximum.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.Progress.Details">
            <summary>
            Subtask details.
            </summary>
        </member>
        <member name="M:SenseNet.TaskManagement.Core.Progress.ToString">
            <summary>
            Serializes this object to JSON.
            </summary>
        </member>
        <member name="T:SenseNet.TaskManagement.Core.SnSubtask">
            <summary>
            Represents part of a task that is being executed (e.g. downloading a file or querying necessary content).
            Provides progress information to the UI.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnSubtask.Id">
            <summary>
            Subtask identifier.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnSubtask.Title">
            <summary>
            Subtask title.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnSubtask.Details">
            <summary>
            Subtask details.
            </summary>
        </member>
        <member name="M:SenseNet.TaskManagement.Core.SnSubtask.#ctor">
            <summary>
            Initializes an instance of the SnSubtask class.
            </summary>
        </member>
        <member name="M:SenseNet.TaskManagement.Core.SnSubtask.#ctor(System.String,System.String)">
            <summary>
            Initializes an instance of the SnSubtask class.
            </summary>
            <param name="title">Subtask title.</param>
            <param name="details">Optional subtask details.</param>
        </member>
        <member name="M:SenseNet.TaskManagement.Core.SnSubtask.ToString">
            <summary>
            Serializes this object to JSON.
            </summary>
        </member>
        <member name="M:SenseNet.TaskManagement.Core.SnSubtask.Start">
            <summary>
            Starts the subtask by sending a message to the agent.
            </summary>
        </member>
        <member name="M:SenseNet.TaskManagement.Core.SnSubtask.Progress(System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Sends progress information to the agent about this subtask.
            </summary>
            <param name="subtaskProgress">Subtask progress to aid a progress bar.</param>
            <param name="subtaskProgressMax">Subtask progress maximum.</param>
            <param name="overallProgress">Overall progress of the whole task.</param>
            <param name="overallProgressMax">Overall progress maximum of the whole task.</param>
            <param name="details">Subtask details.</param>
        </member>
        <member name="M:SenseNet.TaskManagement.Core.SnSubtask.Finish(System.String)">
            <summary>
            Finalizes the subtask by sending a message to the agent.
            </summary>
            <param name="details">Subtask details.</param>
        </member>
        <member name="T:SenseNet.TaskManagement.Core.RegisterTaskResult">
            <summary>
            Task registration result (e.g. whether this is a new task or an existing one).
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.RegisterTaskResult.Task">
            <summary>
            The task that was created or updated.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.RegisterTaskResult.NewlyCreated">
            <summary>
            True if the task was newly created by this register request.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.RegisterTaskResult.Updated">
            <summary>
            True if the task existed before and was only updated by this register request.
            </summary>
        </member>
        <member name="T:SenseNet.TaskManagement.Core.SnTask">
            <summary>
            This is the main entity in the Task Management component. Represents a unit of work that is registered
            by client applications with the central Task Management web application. Agents will lock these tasks
            for themselves and will execute the appropriate task executor passing this object to them.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnTask.Id">
            <summary>
            Task identifier.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnTask.Type">
            <summary>
            Task type. Identifies the executor command line tool (without the '.exe' extension) that will be started by the agent.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnTask.Title">
            <summary>
            Task title.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnTask.Order">
            <summary>
            Task priority. Must be one of the predefined TaskPriority enum values: 0, 1, 10, 100, 1000.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnTask.Tag">
            <summary>
            Optional tag that classifies the task in the client application (e.g. the workspace where the task was generated in).
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnTask.RegisteredAt">
            <summary>
            Task registration UTC time.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnTask.AppId">
            <summary>
            Client application that registered the task.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnTask.LastLockUpdate">
            <summary>
            When the executing agent updated the lock on the task.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnTask.LockedBy">
            <summary>
            The agent that locked this task.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnTask.TaskKey">
            <summary>
            Optional task key.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnTask.Hash">
            <summary>
            Hash that represents this task. Can be provided by the client application, 
            but usually it is generated by the Task Management component.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnTask.TaskData">
            <summary>
            String representation of the information necessary for the task executor tool to run. 
            Usually a JSON object containing properties - e.g. content id or any other custom
            value. This data is not parsed by the Task Management component, it is only passed
            over to the executor without changes.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnTask.FinalizeUrl">
            <summary>
            Custom callback url for this task type.
            </summary>
        </member>
        <member name="T:SenseNet.TaskManagement.Core.SnTaskError">
            <summary>
            Represents an error that occured during task execution.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnTaskError.ErrorCode">
            <summary>
            Error code.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnTaskError.ErrorType">
            <summary>
            Exception type name or a custom error type.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnTaskError.Message">
            <summary>
            Error message.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnTaskError.Details">
            <summary>
            Error details.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnTaskError.CallingContext">
            <summary>
            Custom error data serialized in JSON format.
            </summary>
        </member>
        <member name="M:SenseNet.TaskManagement.Core.SnTaskError.Create(System.Exception,System.Object)">
            <summary>
            Creates a task execution error object based on an exception and a custom context data.
            </summary>
            <param name="e">Exception thrown when trying to execute a task.</param>
            <param name="callingContext">Custom object that will be serialized to the error object.</param>
        </member>
        <member name="M:SenseNet.TaskManagement.Core.SnTaskError.Create(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a task execution error object.
            </summary>
            <param name="errorCode">Error code.</param>
            <param name="errorType">Error type (e.g. exception type name).</param>
            <param name="message">Error message.</param>
            <param name="details">Error details.</param>
        </member>
        <member name="M:SenseNet.TaskManagement.Core.SnTaskError.Parse(System.String)">
            <summary>
            Deserializes an error sent by the executor in JSON format.
            </summary>
            <param name="src">Error text in JSON.</param>
            <returns>An SnTaskError object.</returns>
        </member>
        <member name="M:SenseNet.TaskManagement.Core.SnTaskError.ToString">
            <summary>
            Serializes this object to JSON.
            </summary>
        </member>
        <member name="T:SenseNet.TaskManagement.Core.TaskEventType">
            <summary>
            Contains constants for different task events.
            </summary>
        </member>
        <member name="F:SenseNet.TaskManagement.Core.TaskEventType.Registered">
            <summary>
            Registered event.
            </summary>
        </member>
        <member name="F:SenseNet.TaskManagement.Core.TaskEventType.Updated">
            <summary>
            Updated event.
            </summary>
        </member>
        <member name="F:SenseNet.TaskManagement.Core.TaskEventType.Started">
            <summary>
            Started event.
            </summary>
        </member>
        <member name="F:SenseNet.TaskManagement.Core.TaskEventType.Done">
            <summary>
            Done event.
            </summary>
        </member>
        <member name="F:SenseNet.TaskManagement.Core.TaskEventType.Failed">
            <summary>
            Failed event.
            </summary>
        </member>
        <member name="F:SenseNet.TaskManagement.Core.TaskEventType.SubtaskStarted">
            <summary>
            SubtaskStarted event.
            </summary>
        </member>
        <member name="F:SenseNet.TaskManagement.Core.TaskEventType.SubtaskFinished">
            <summary>
            SubtaskFinished event.
            </summary>
        </member>
        <member name="F:SenseNet.TaskManagement.Core.TaskEventType.Progress">
            <summary>
            Progress event.
            </summary>
        </member>
        <member name="F:SenseNet.TaskManagement.Core.TaskEventType.Idle">
            <summary>
            Idle event.
            </summary>
        </member>
        <member name="T:SenseNet.TaskManagement.Core.SnTaskEvent">
            <summary>
            Represents an event in the task life cycle (e.g.Registered or Updated).
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnTaskEvent.Id">
            <summary>
            Event identifier.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnTaskEvent.EventType">
            <summary>
            Event type.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnTaskEvent.EventTime">
            <summary>
            Time of occurence.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnTaskEvent.Title">
            <summary>
            Event title.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnTaskEvent.Details">
            <summary>
            Event details.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnTaskEvent.AppId">
            <summary>
            Client application id.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnTaskEvent.Tag">
            <summary>
            Event tag.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnTaskEvent.Machine">
            <summary>
            Machine name where the task was executed.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnTaskEvent.Agent">
            <summary>
            Agent name.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnTaskEvent.TaskId">
            <summary>
            Task identifier.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnTaskEvent.SubtaskId">
            <summary>
            Subtask identifier.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnTaskEvent.TaskType">
            <summary>
            Task type identifier.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnTaskEvent.TaskOrder">
            <summary>
            Task priority.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnTaskEvent.TaskHash">
            <summary>
            Task hash.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnTaskEvent.TaskData">
            <summary>
            Task data.
            </summary>
        </member>
        <member name="M:SenseNet.TaskManagement.Core.SnTaskEvent.CreateRegisteredEvent(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Double,System.Int64,System.String)">
            <summary>
            Creates a task event for task registration.
            </summary>
            <param name="taskId">Task id.</param>
            <param name="title">Event title.</param>
            <param name="details">Event details.</param>
            <param name="appId">Client app id.</param>
            <param name="tag">Task tag.</param>
            <param name="machine">Agent machine.</param>
            <param name="taskType">Task type name.</param>
            <param name="taskOrder">Task priority.</param>
            <param name="taskHash">Task hash.</param>
            <param name="taskData">Task data.</param>
        </member>
        <member name="M:SenseNet.TaskManagement.Core.SnTaskEvent.CreateUpdatedEvent(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Double,System.Int64,System.String)">
            <summary>
            Creates a task event for updating a task.
            </summary>
            <param name="taskId">Task id.</param>
            <param name="title">Event title.</param>
            <param name="details">Event details.</param>
            <param name="appId">Client app id.</param>
            <param name="tag">Task tag.</param>
            <param name="machine">Agent machine.</param>
            <param name="taskType">Task type name.</param>
            <param name="taskOrder">Task priority.</param>
            <param name="taskHash">Task hash.</param>
            <param name="taskData">Task data.</param>
        </member>
        <member name="M:SenseNet.TaskManagement.Core.SnTaskEvent.CreateStartedEvent(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a task event for starting a task.
            </summary>
            <param name="taskId">Task id.</param>
            <param name="title">Event title.</param>
            <param name="details">Event details.</param>
            <param name="appId">Client app id.</param>
            <param name="tag">Task tag.</param>
            <param name="machine">Agent machine.</param>
            <param name="agent">Agent name.</param>
        </member>
        <member name="M:SenseNet.TaskManagement.Core.SnTaskEvent.CreateDoneEvent(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a task event for finishing the task.
            </summary>
            <param name="taskId">Task id.</param>
            <param name="title">Event title.</param>
            <param name="details">Event details.</param>
            <param name="appId">Client app id.</param>
            <param name="tag">Task tag.</param>
            <param name="machine">Agent machine.</param>
            <param name="agent">Agent name.</param>
        </member>
        <member name="M:SenseNet.TaskManagement.Core.SnTaskEvent.CreateFailedEvent(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a task event for a failed task.
            </summary>
            <param name="taskId">Task id.</param>
            <param name="title">Event title.</param>
            <param name="details">Event details.</param>
            <param name="appId">Client app id.</param>
            <param name="tag">Task tag.</param>
            <param name="machine">Agent machine.</param>
            <param name="agent">Agent name.</param>
        </member>
        <member name="M:SenseNet.TaskManagement.Core.SnTaskEvent.CreateSubtaskStartedEvent(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Guid)">
            <summary>
            Creates a task event for starting a subtask.
            </summary>
            <param name="taskId">Task id.</param>
            <param name="title">Event title.</param>
            <param name="details">Event details.</param>
            <param name="appId">Client app id.</param>
            <param name="tag">Task tag.</param>
            <param name="machine">Agent machine.</param>
            <param name="agent">Agent name.</param>
            <param name="subtaskId">Subtask id.</param>
        </member>
        <member name="M:SenseNet.TaskManagement.Core.SnTaskEvent.CreateSubtaskFinishedEvent(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Guid)">
            <summary>
            Creates a task event for finishing a subtask.
            </summary>
            <param name="taskId">Task id.</param>
            <param name="title">Event title.</param>
            <param name="details">Event details.</param>
            <param name="appId">Client app id.</param>
            <param name="tag">Task tag.</param>
            <param name="machine">Agent machine.</param>
            <param name="agent">Agent name.</param>
            <param name="subtaskId">Subtask id.</param>
        </member>
        <member name="M:SenseNet.TaskManagement.Core.SnTaskEvent.CreateTaskEvent(System.Nullable{System.Int32},System.Int32,System.String,System.DateTime,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Guid},System.String,System.Nullable{System.Double},System.Nullable{System.Int64},System.String)">
            <summary>
            Creates a custom task event.
            </summary>
            <param name="id">Event id.</param>
            <param name="taskId">Task id.</param>
            <param name="eventType">Custom event type.</param>
            <param name="eventTime">Event time.</param>
            <param name="title">Event title.</param>
            <param name="details">Event details.</param>
            <param name="appId">Client app id.</param>
            <param name="tag">Task tag.</param>
            <param name="machine">Agent machine.</param>
            <param name="agent">Agent name.</param>
            <param name="subtaskId">Subtask id.</param>
            <param name="taskType"></param>
            <param name="taskOrder"></param>
            <param name="taskHash"></param>
            <param name="taskData"></param>
        </member>
        <member name="T:SenseNet.TaskManagement.Core.SnHealthRecord">
            <summary>
            Contains information about the environment on the task agent machine.
            </summary>
        </member>
        <member name="F:SenseNet.TaskManagement.Core.SnHealthRecord.Machine">
            <summary>
            Machine name.
            </summary>
        </member>
        <member name="F:SenseNet.TaskManagement.Core.SnHealthRecord.Agent">
            <summary>
            Agent name.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnHealthRecord.EventTime">
            <summary>
            Event time.
            </summary>
        </member>
        <member name="F:SenseNet.TaskManagement.Core.SnHealthRecord.ProcessId">
            <summary>
            Agent process id.
            </summary>
        </member>
        <member name="F:SenseNet.TaskManagement.Core.SnHealthRecord.CPU">
            <summary>
            CPU performance counter value.
            </summary>
        </member>
        <member name="F:SenseNet.TaskManagement.Core.SnHealthRecord.RAM">
            <summary>
            RAM performance counter value.
            </summary>
        </member>
        <member name="F:SenseNet.TaskManagement.Core.SnHealthRecord.TotalRAM">
            <summary>
            Physical memory size on the agent machine.
            </summary>
        </member>
        <member name="F:SenseNet.TaskManagement.Core.SnHealthRecord.StartTime">
            <summary>
            Agent process start time.
            </summary>
        </member>
        <member name="F:SenseNet.TaskManagement.Core.SnHealthRecord.EventType">
            <summary>
            Event type.
            </summary>
        </member>
        <member name="M:SenseNet.TaskManagement.Core.SnHealthRecord.ToString">
            <summary>
            Serializes this object to JSON.
            </summary>
        </member>
        <member name="T:SenseNet.TaskManagement.Core.SnProgressRecord">
            <summary>
            Task execution progress record for client applications.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnProgressRecord.Title">
            <summary>
            Progress title.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnProgressRecord.Details">
            <summary>
            Progress details.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnProgressRecord.AppId">
            <summary>
            Client application id.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnProgressRecord.Tag">
            <summary>
            Task tag.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnProgressRecord.TaskId">
            <summary>
            Task id.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnProgressRecord.Progress">
            <summary>
            Progress data.
            </summary>
        </member>
        <member name="M:SenseNet.TaskManagement.Core.SnProgressRecord.ToString">
            <summary>
            Serializes this object to JSON.
            </summary>
        </member>
        <member name="T:SenseNet.TaskManagement.Core.SnTaskResult">
            <summary>
            Represents a task execution result.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnTaskResult.MachineName">
            <summary>
            Agent machine name.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnTaskResult.AgentName">
            <summary>
            Agent name.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnTaskResult.Task">
            <summary>
            Task details.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnTaskResult.ResultCode">
            <summary>
            Execution result code.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnTaskResult.ResultData">
            <summary>
            Result data.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnTaskResult.Error">
            <summary>
            Task error data.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.SnTaskResult.Successful">
            <summary>
            Gets whether the task execution was successful.
            </summary>
        </member>
        <member name="T:SenseNet.TaskManagement.Core.TaskFinishedEventArgs">
            <summary>
            Represents a task finish event data.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.TaskFinishedEventArgs.TaskResult">
            <summary>
            Task execution result.
            </summary>
        </member>
        <member name="T:SenseNet.TaskManagement.Core.TaskManagementException">
            <summary>
            Represents an error in the Task Management component.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.TaskManagementException.AppId">
            <summary>
            Client application id.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.TaskManagementException.MachineName">
            <summary>
            Agent machine name.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.TaskManagementException.TaskId">
            <summary>
            Task identifier.
            </summary>
        </member>
        <member name="P:SenseNet.TaskManagement.Core.TaskManagementException.TaskType">
            <summary>
            Task type name.
            </summary>
        </member>
        <member name="M:SenseNet.TaskManagement.Core.TaskManagementException.#ctor">
            <summary>
            Initializes an instance of the TaskManagementException class.
            </summary>
        </member>
        <member name="M:SenseNet.TaskManagement.Core.TaskManagementException.#ctor(System.String)">
            <summary>
            Initializes an instance of the TaskManagementException class.
            </summary>
            <param name="message">Exception message.</param>
        </member>
        <member name="M:SenseNet.TaskManagement.Core.TaskManagementException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes an instance of the TaskManagementException class.
            </summary>
            <param name="message">Exception message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:SenseNet.TaskManagement.Core.TaskManagementException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes an instance of the TaskManagementException class.
            </summary>
            <param name="message">Exception message.</param>
            <param name="appId">Client app id.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:SenseNet.TaskManagement.Core.TaskManagementException.#ctor(System.String,System.String,System.Int32,System.String,System.Exception)">
            <summary>
            Initializes an instance of the TaskManagementException class.
            </summary>
            <param name="message">Exception message.</param>
            <param name="appId">Client app id.</param>
            <param name="taskId">Task id.</param>
            <param name="taskType">Task type name.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:SenseNet.TaskManagement.Core.TaskManagementException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes an instance of the TaskManagementException class.
            </summary>
        </member>
        <member name="M:SenseNet.TaskManagement.Core.TaskManagementException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the SerializationInfo with information about the exception.
            </summary>
        </member>
        <member name="T:SenseNet.TaskManagement.Core.TaskPriority">
            <summary>
            Enum for possible task priority values. Tasks with a higher priority will always be performed first.
            </summary>
        </member>
        <member name="F:SenseNet.TaskManagement.Core.TaskPriority.System">
            <summary>
            System task, will be performed ahead of everything else.
            </summary>
        </member>
        <member name="F:SenseNet.TaskManagement.Core.TaskPriority.Immediately">
            <summary>
            To be performed as soon as possible.
            </summary>
        </member>
        <member name="F:SenseNet.TaskManagement.Core.TaskPriority.Important">
            <summary>
            Important task.
            </summary>
        </member>
        <member name="F:SenseNet.TaskManagement.Core.TaskPriority.Normal">
            <summary>
            Normal task.
            </summary>
        </member>
        <member name="F:SenseNet.TaskManagement.Core.TaskPriority.Unimportant">
            <summary>
            Can be performed later.
            </summary>
        </member>
    </members>
</doc>
