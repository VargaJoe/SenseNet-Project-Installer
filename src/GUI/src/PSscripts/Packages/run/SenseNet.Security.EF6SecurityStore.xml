<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SenseNet.Security.EF6SecurityStore</name>
    </assembly>
    <members>
        <member name="T:SenseNet.Security.EF6SecurityStore.MigrationsConfiguration">
            <summary>
            Migration class for switching OFF automatic database migration. Do not delete this class!
            </summary>
        </member>
        <member name="T:SenseNet.Security.EF6SecurityStore.EF6SecurityDataProvider">
            <summary>
            An ISecurityDataProvider implementation built on top of Entity Framework.
            </summary>
        </member>
        <member name="M:SenseNet.Security.EF6SecurityStore.EF6SecurityDataProvider.#ctor(System.Int32,System.String)">
            <summary>Initializes a new instance of the EF6SecurityDataProvider class.</summary>
        </member>
        <member name="P:SenseNet.Security.EF6SecurityStore.EF6SecurityDataProvider.ConnectionString">
            <summary>
            Control data for building a connection to the database server.
            </summary>
        </member>
        <member name="M:SenseNet.Security.EF6SecurityStore.EF6SecurityDataProvider.CreateNew">
            <summary>
            Creator method. Returns a brand new ISecurityDataProvider instance.
            </summary>
        </member>
        <member name="M:SenseNet.Security.EF6SecurityStore.EF6SecurityDataProvider.DeleteEverything">
            <summary>
            Empties the entire database (clears all records from all tables).
            </summary>
        </member>
        <member name="M:SenseNet.Security.EF6SecurityStore.EF6SecurityDataProvider.InstallDatabase">
            <summary>
            Creates the database schema and other components (tables, etc.). It requires an existing database.
            </summary>
        </member>
        <member name="M:SenseNet.Security.EF6SecurityStore.EF6SecurityDataProvider.GetEstimatedEntityCount">
            <summary>
            Returns with the estimated security entity count as fast as possible.
            System start sequence uses this method.
            </summary>
        </member>
        <member name="M:SenseNet.Security.EF6SecurityStore.EF6SecurityDataProvider.LoadSecurityEntities">
            <summary>
            Preloader method for retrieving all stored SecurityEntity. Called during system start.
            </summary>
        </member>
        <member name="M:SenseNet.Security.EF6SecurityStore.EF6SecurityDataProvider.LoadAffectedEntityIdsByEntriesAndBreaks">
            <summary>
            Loads the set of security holder entity ids.
            This is a distincted int list of entities in entries plus entities that are not inherited (IsInherited = false).
            </summary>
        </member>
        <member name="M:SenseNet.Security.EF6SecurityStore.EF6SecurityDataProvider.LoadAllAces">
            <summary>
            Loader method for retrieving all ACE-s. Called during system start.
            </summary>
        </member>
        <member name="M:SenseNet.Security.EF6SecurityStore.EF6SecurityDataProvider.LoadStoredSecurityEntity(System.Int32)">
            <summary>
            Retrieves the SecurityEntity by the passed identifier. Returns with null if the entity was not found.
            </summary>
        </member>
        <member name="M:SenseNet.Security.EF6SecurityStore.EF6SecurityDataProvider.InsertSecurityEntity(SenseNet.Security.StoredSecurityEntity)">
            <summary>
            Writes the given entity to the database. If it exists before writing, the operation will be skipped.
            </summary>
        </member>
        <member name="M:SenseNet.Security.EF6SecurityStore.EF6SecurityDataProvider.UpdateSecurityEntity(SenseNet.Security.StoredSecurityEntity)">
            <summary>
            Updates the given entity to the database. If it does not exist before updating, a SecurityStructureException must be thrown.
            </summary>
        </member>
        <member name="M:SenseNet.Security.EF6SecurityStore.EF6SecurityDataProvider.DeleteSecurityEntity(System.Int32)">
            <summary>
            Deletes an entity by the given identifier. If the entity does not exist before deleting, this method does nothing.
            </summary>
        </member>
        <member name="M:SenseNet.Security.EF6SecurityStore.EF6SecurityDataProvider.MoveSecurityEntity(System.Int32,System.Int32)">
            <summary>
            Moves the source entity to the target entity. Only a parent relink is needed. All other operations call other data provider methods.
            </summary>
        </member>
        <member name="M:SenseNet.Security.EF6SecurityStore.EF6SecurityDataProvider.LoadAllPermissionEntries">
            <summary>
            This method must return with all stored ACEs that exist in the database in an unordered list.
            </summary>
        </member>
        <member name="M:SenseNet.Security.EF6SecurityStore.EF6SecurityDataProvider.LoadPermissionEntries(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Loads an ACL-chain. Caller provides the parent chain of an entity.
            This method must return with all stored ACEs that belong to any of the passed entity ids.
            Order is irrelevant.
            </summary>
        </member>
        <member name="M:SenseNet.Security.EF6SecurityStore.EF6SecurityDataProvider.LoadDescendantAces(System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Loads a list of all of the stored ACEs of a subtree in an ordered way.
            The result must be filtered by the related identities.
            </summary>
            <remarks>
            If the unique path sholud be stored into the StoredAce, the followiwng SQL query can demonstrate the task of this method:
            SELECT * FROM StoredAces WHERE Path LIKE @path + '/%' AND IdentityId IN ( @ident1, ident2, ... ) ORDER BY Path
            </remarks>
            <param name="entityId">Provides the subtree.</param>
            <param name="identities">Relevant identities</param>
        </member>
        <member name="M:SenseNet.Security.EF6SecurityStore.EF6SecurityDataProvider.WritePermissionEntries(System.Collections.Generic.IEnumerable{SenseNet.Security.StoredAce})">
            <summary>
            Inserts or updates one or more StoredACEs. An ACE is identified by a compound key: EntityId, IdentityId, LocalOnly
            </summary>
        </member>
        <member name="M:SenseNet.Security.EF6SecurityStore.EF6SecurityDataProvider.RemovePermissionEntries(System.Collections.Generic.IEnumerable{SenseNet.Security.StoredAce})">
            <summary>
            Deletes the given ACEs.  If an ACE does not exist before deleting, it must be skipped.
            An ACE is identified by a compound key: EntityId, IdentityId, LocalOnly
            </summary>
        </member>
        <member name="M:SenseNet.Security.EF6SecurityStore.EF6SecurityDataProvider.RemovePermissionEntriesByEntity(System.Int32)">
            <summary>
            Deletes all ACEs related to the given entity id.
            </summary>
        </member>
        <member name="M:SenseNet.Security.EF6SecurityStore.EF6SecurityDataProvider.DeleteEntitiesAndEntries(System.Int32)">
            <summary>
            Deletes all ACEs related to any of the entities in a subtree defined by the provided root id, then deletes all the entities too.
            </summary>
        </member>
        <member name="M:SenseNet.Security.EF6SecurityStore.EF6SecurityDataProvider.GetLastSecurityActivityId(System.DateTime)">
            <summary>
            Returns the biggest activity id that was saved before the provided time if there is any.
            Otherwise returns with 0.
            </summary>
        </member>
        <member name="M:SenseNet.Security.EF6SecurityStore.EF6SecurityDataProvider.GetUnprocessedActivityIds">
            <summary>
            Returns an array of all unprocessed activity ids supplemented with the last stored activity id.
            Empty array means that the database does not contain any activities.
            Array with only one element means that the database does not contain any unprocessed element and the last stored activity id is the returned item.
            Two or more element means that the array contains one or more unprocessed activity id and the last element is the last stored activity id.
            </summary>
            <returns>Zero or more id of unprocessed elements supplemented with the last stored activity id.</returns>
        </member>
        <member name="M:SenseNet.Security.EF6SecurityStore.EF6SecurityDataProvider.LoadSecurityActivities(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Loads a SecurityActivity fragment within the specified limits.
            If the count of activities in the id boundary ("from", "to") is bigger
            than the given fragment size ("count"), the largest id could not reach.
            Activities in the result array are sorted by id.
            Value of the IsUnprocessedActivity property of every loaded object
            vill be the value of the given "executingUnprocessedActivities" parameter.
            </summary>
            <param name="from">Least expected id.</param>
            <param name="to">Largest allowed id.</param>
            <param name="count">Fragment size.</param>
            <param name="executingUnprocessedActivities">Value of the IsUnprocessedActivity property of every loaded object.</param>
        </member>
        <member name="M:SenseNet.Security.EF6SecurityStore.EF6SecurityDataProvider.LoadSecurityActivities(System.Int32[],System.Boolean)">
            <summary>
            Loads a SecurityActivity fragment by the individual id array.
            Activities in the result array are sorted by id.
            Value of the IsUnprocessedActivity property of every loaded object
            vill be the value of the given "executingUnprocessedActivities" parameter.
            </summary>
            <param name="gaps">Individual id array</param>
            <param name="executingUnprocessedActivities">Value of the IsUnprocessedActivity property of every loaded object.</param>
        </member>
        <member name="M:SenseNet.Security.EF6SecurityStore.EF6SecurityDataProvider.LoadSecurityActivity(System.Int32)">
            <summary>
            Returns a SecurityActivity.
            </summary>
        </member>
        <member name="M:SenseNet.Security.EF6SecurityStore.EF6SecurityDataProvider.SaveSecurityActivity(SenseNet.Security.Messaging.SecurityMessages.SecurityActivity,System.Int32@)">
            <summary>
            Stores the full data of the passed activity.
            Returns with the generated activity id and the size of the activity's body. 
            Activity ids in the database must be a consecutive list of numbers.
            </summary>
            <param name="activity">Activity to save.</param>
            <param name="bodySize">Activity size in bytes.</param>
            <returns>The generated activity id.</returns>
        </member>
        <member name="M:SenseNet.Security.EF6SecurityStore.EF6SecurityDataProvider.CleanupSecurityActivities(System.Int32)">
            <summary>
            Deletes all the activities that were saved before the given time limit.
            </summary>
        </member>
        <member name="M:SenseNet.Security.EF6SecurityStore.EF6SecurityDataProvider.AcquireSecurityActivityExecutionLock(SenseNet.Security.Messaging.SecurityMessages.SecurityActivity,System.Int32)">
            <summary>
            Ensures an exclusive (only one) object for the activity. Returns the new lock object or null.
            </summary>
        </member>
        <member name="M:SenseNet.Security.EF6SecurityStore.EF6SecurityDataProvider.RefreshSecurityActivityExecutionLock(SenseNet.Security.Messaging.SecurityMessages.SecurityActivity)">
            <summary>
            Refreshes the lock object to avoid its timeout.
            </summary>
        </member>
        <member name="M:SenseNet.Security.EF6SecurityStore.EF6SecurityDataProvider.ReleaseSecurityActivityExecutionLock(SenseNet.Security.Messaging.SecurityMessages.SecurityActivity)">
            <summary>
            Releases the lock and prevents locking that activity again by setting its state to Executed.
            </summary>
        </member>
        <member name="M:SenseNet.Security.EF6SecurityStore.EF6SecurityDataProvider.QueryGroupRelatedEntities(System.Int32,System.Collections.Generic.IEnumerable{System.Int32}@,System.Collections.Generic.IEnumerable{System.Int32}@)">
            <summary>
            This method provides a collection of entity ids that have a group-related access control entry.
            </summary>
            <param name="groupId"></param>
            <param name="entityIds">Entities that have one or more group related ACEs. These ACEs will be removed from the ACLs.</param>
            <param name="exclusiveEntityIds">Entities that have only the given group related ACEs. These ACLs will be removed.</param>
        </member>
        <member name="M:SenseNet.Security.EF6SecurityStore.EF6SecurityDataProvider.LoadAllGroups">
            <summary>
            Preloader method for retrieving all stored SecurityGroups. Called during system start.
            </summary>
        </member>
        <member name="M:SenseNet.Security.EF6SecurityStore.EF6SecurityDataProvider.LoadSecurityGroup(System.Int32)">
            <summary>
            Loads a SecurityGroup from the database.
            </summary>
        </member>
        <member name="M:SenseNet.Security.EF6SecurityStore.EF6SecurityDataProvider.DeleteIdentityAndRelatedEntries(System.Int32)">
            <summary>
            Deletes memberships and entries related to an identity.
            </summary>
        </member>
        <member name="M:SenseNet.Security.EF6SecurityStore.EF6SecurityDataProvider.DeleteIdentitiesAndRelatedEntries(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Deletes memberships and entries related to the provided identities.
            </summary>
        </member>
        <member name="M:SenseNet.Security.EF6SecurityStore.EF6SecurityDataProvider.AddMembers(System.Int32,System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Adds one or more users and groups to the specified group.
            </summary>
            <param name="groupId">Id of the group that will have new members.</param>
            <param name="userMembers">Contains the ids of new users. Can be null or an empty list too.</param>
            <param name="groupMembers">Contains the ids of new groups. Can be null or an empty list too.</param>
        </member>
        <member name="M:SenseNet.Security.EF6SecurityStore.EF6SecurityDataProvider.RemoveMembers(System.Int32,System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Removes one or more users and groups from the specified group.
            </summary>
            <param name="groupId">Id of a group.</param>
            <param name="userMembers">Contains the ids of users that will be removed. Can be null or an empty list too.</param>
            <param name="groupMembers">Contains the ids of groups that will be removed. Can be null or an empty list too.</param>
        </member>
        <member name="M:SenseNet.Security.EF6SecurityStore.EF6SecurityDataProvider.GetMembershipForConsistencyCheck">
            <summary>
            Returns with information for consistency check: a compound number containing the group's and the member's id.
            </summary>
        </member>
        <member name="M:SenseNet.Security.EF6SecurityStore.EFEntry.ToString">
            <summary>Tests use this method. DO NOT REMOVE.</summary>
        </member>
        <member name="F:SenseNet.Security.EF6SecurityStore.SecurityStorage.CLEANUPDATABASESCRIPT">
            <summary>Only for tests</summary>
        </member>
        <member name="M:SenseNet.Security.EF6SecurityStore.SecurityStorage.CleanupDatabase">
            <summary>Only for re-istallation and tests.</summary>
        </member>
        <member name="F:SenseNet.Security.EF6SecurityStore.SecurityStorage.RESOURCE_INSTALLDB">
            <summary>
            Name of the SQL script resource file that contains all the table and constraint creation commands.
            </summary>
        </member>
        <member name="F:SenseNet.Security.EF6SecurityStore.SecurityStorage.CLEANUPMEMBERSHIPSCRIPT">
            <summary>Only for tests</summary>
        </member>
        <member name="M:SenseNet.Security.EF6SecurityStore.SecurityStorage._cleanupMembership">
            <summary>Only for tests</summary>
        </member>
    </members>
</doc>
